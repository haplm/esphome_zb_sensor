esphome:
  name: zb-sensor
  platformio_options:
    platform: https://github.com/luar123/platform-espressif32H2/archive/refs/tags/v6.5.1.zip
  includes:
    - esphome_zb.h
    - esp_zb_light.c
    - esp_zb_light.h
    
esp32:
  board: esp32-h2-devkitm-1
  flash_size: 4MB
  partitions: partitions_zb.csv
  framework:
    type: esp-idf
    version: 5.1.2
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y
      CONFIG_ZB_ENABLED: y
      CONFIG_ZB_ZED: y
      CONFIG_ZB_RADIO_NATIVE: y
      ZB_ED_ROLE: y
  variant: esp32h2

# Enable logging
logger:
  hardware_uart: UART0

globals:
  - id: z61high
    type: int16_t
    restore_value: yes
    initial_value: "0"
  - id: z61low
    type: int32_t
    restore_value: yes
    initial_value: "0"

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO12
      mode: INPUT_PULLUP ## set ESP32 pin to input pull-up mode
      inverted: true
    name: Z-61 Pulse Counter
    id: gassensor_state
    device_class: window
    filters:
      - delayed_off: 10ms
    ## This automation will be triggered when a button press ends,
    ## or in other words on the falling edge of the signal.
    on_release:
      then:
        - lambda: |-
            ESP_LOGI("main", " -------  Z-61 falling edge");
            
            // Increment z61low directly
            id(z61low) += 1;
            
            // Check for overflow and increment z61high if necessary
            if (id(z61low) == 0) {  // Assuming overflow occurs when z61low wraps around to 0
                id(z61high) += 1;
            }
            
            // Create an esp_zb_uint48_s structure with the updated values
            // esp_zb_uint48_s currentValue;
            // currentValue.low = id(z61low);
            // currentValue.high = id(z61high);
            // ESP_LOGI("main", "Going to update meter: high = %hu, low = %lu", currentValue.high, currentValue.low);
            // reportAttribute(ESP_ZB_ZCL_CLUSTER_ID_METERING, ESP_ZB_ZCL_ATTR_METERING_CURRENT_SUMMATION_DELIVERED_ID, &currentValue);
            // ESP_LOGI("main", "Updated high = %hu, low = %lu", currentValue.high, currentValue.low);

            bool state = false;
            reportAttribute(ESP_ZB_ZCL_CLUSTER_ID_ON_OFF, ESP_ZB_ZCL_ATTR_ON_OFF_ON_OFF_ID, &state);
            ESP_LOGI("main", "Updated state to OFF");

    on_press:
      - lambda: |-
            ESP_LOGI("main", " -------  Z-61 rising edge");
            bool state = true;
            reportAttribute(ESP_ZB_ZCL_CLUSTER_ID_ON_OFF, ESP_ZB_ZCL_ATTR_ON_OFF_ON_OFF_ID, &state);
            ESP_LOGI("main", "Updated state to ON");
            
custom_component:
- lambda: |-
    auto my_zb = new esphomeZB();
    return {my_zb};
  components:
  - id: zb
